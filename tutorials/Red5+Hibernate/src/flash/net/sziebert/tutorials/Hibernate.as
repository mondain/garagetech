package net.sziebert.tutorials {		import com.adobe.crypto.MD5;		import fl.controls.Button;	import fl.controls.Label;	import fl.controls.TextArea;	import fl.controls.TextInput;	import fl.managers.StyleManager;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.net.NetConnection;	import flash.net.ObjectEncoding;	import flash.net.registerClassAlias;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;		import net.sziebert.tutorials.Runtime;		/** 	 * Hibernate is responsible for creating and managing all of the	 * components used to render the user interface.  It is also responsible 	 * for responding to events generated by the interface or server connection.	 */	public class Hibernate extends Sprite {				private var connect:Button;		private var pass:TextInput;		private var passLbl:Label;		private var runtime:Runtime;		private var textArea:TextArea;		private var user:TextInput;		private var userLbl:Label;				public function Hibernate():void {			trace("Starting Hibernate application...");			runtime = Runtime.getInstance();			stage.align = StageAlign.TOP_LEFT;            stage.scaleMode = StageScaleMode.NO_SCALE;			stage.addEventListener(Event.RESIZE, onResize);			createChildren();		}				/* ----- Utility functions ----- */				private function createChildren():void {			// Create the username label.			userLbl = new Label();			userLbl.text = "Username:";			userLbl.autoSize = TextFieldAutoSize.LEFT;			addChild(userLbl);			// Create the username input field.			user = new TextInput();			user.maxChars = 255;			user.restrict = "A-Za-z 0-9:;()|.,?!$&*{}[]+=_\\-\'\"";			addChild(user);			// Create the password label,			passLbl = new Label();			passLbl.text = "Password:";			passLbl.autoSize = TextFieldAutoSize.LEFT;			addChild(passLbl);			// Create the password input field.			pass = new TextInput();			pass.maxChars = 255;			pass.displayAsPassword = true;			addChild(pass);			// Create the connect button.			connect = new Button();			connect.label = "Connect";			connect.addEventListener(MouseEvent.CLICK, onClick);			addChild(connect);			// Create the text area to display the log information.			textArea = new TextArea();			textArea.editable = false;			textArea.wordWrap = true;			addChild(textArea);			// Remove the avatar.			removeChildAt(0);			// Size the elements.			setSize(stage.stageWidth, stage.stageHeight);		}				private function setSize(w:Number, h:Number):void {			// Move and size the username components			userLbl.move(18, 18);			//userLabel.setSize(50, 22);			user.move(96, 18);			user.setSize((w - 226), 22);			// Move and size the password components			passLbl.move(18, 50);			//passLabel.setSize(50, 22);			pass.move(96, 50);			pass.setSize((w - 226), 22);			// Move and size the connect button			connect.move(w - 118, 18);			connect.setSize(100, 54);			// Move and size the textarea			textArea.move(18, 82);			textArea.setSize((w - 36), (h - 100));		}				private function initConnection(username:String, password:String):void {			if (username == "" || password == "") {				throw new Error("You must enter a valid username and/or password.");			}			// Create the new connection object.			runtime.conn = new NetConnection();			runtime.conn.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);            runtime.conn.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			log("Connecting to Red5...");            runtime.conn.connect("rtmp://localhost/hibernate/test", username, MD5.hash(password));		}				private function log(msg:String):void {			// Update the chat window with the message			textArea.text += (msg + "\n");			textArea.verticalScrollPosition = textArea.maxVerticalScrollPosition;		}				/* ----- Event handlers ----- */				private function onResize(event:Event):void {			setSize(stage.stageWidth, stage.stageHeight);		}				private function onClick(event:MouseEvent):void {			var button:Button = event.target as Button;			// We are currently connected, so disconnect.			if (runtime.conn && runtime.conn.connected) {				runtime.conn.close();				return;			} 			try {				// Initialize the connection				initConnection(user.text, pass.text);			} catch (err:Error) {				// Otherwise we need to show an alert indicating the need for proper user input.				log("Error: You must enter a valid username and/or password.");			}		}				private function onNetStatus(event:NetStatusEvent):void {			trace("onNetStatus: " + event.info.code);            switch (event.info.code) {                case "NetConnection.Connect.Success":					log("Connection attempt successful.");					connect.label = "Disconnect";                    break;				case "NetConnection.Connect.Rejected":					log("Connection attempt rejected.");					break;				case "NetConnection.Connect.Closed":					log("Connection closed.");					connect.label = "Connect";					break;				case "NetConnection.Connect.Failed":					log("Connection failure.");					break;            }        }        private function onSecurityError(event:SecurityErrorEvent):void {            trace("onSecurityError: " + event);        }	}}